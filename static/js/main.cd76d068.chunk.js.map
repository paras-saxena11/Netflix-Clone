{"version":3,"sources":["Components/request.js","Components/axios.js","Components/banner.js","Components/RowComp.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","request","fecthNetflixOriginals","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentries","instantFetch","axios","create","baseURL","Banner","useState","movie","setMovie","useEffect","a","get","response","data","results","Math","floor","random","length","fetch_banner","className","style","backgroundImage","backdrop_path","backgroundPosition","backgroundSize","name","overview","RowComp","props","movies","setMovies","fetchUrl","res","fetchMovies","title","map","largeposter","src","poster_path","alt","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd76d068.chunk.js","sourcesContent":["const API_KEY = \"0dd9bf41c6895ad9c8543b11dc2387a4\";\r\n\r\nconst request = {\r\n    fecthNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTrending: `trending/all/day?api_key=${API_KEY}`,\r\n    fetchTopRated: `movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default request;","import axios from \"axios\";\r\n\r\nconst instantFetch = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instantFetch;\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport request from \"./request\";\r\nimport axios from \"./axios\";\r\nimport \"./banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetch_banner = async () => {\r\n      const response = await axios.get(request.fecthNetflixOriginals);\r\n\r\n      setMovie(\r\n        response.data.results[\r\n          Math.floor(Math.random() * response.data.results.length - 1)\r\n        ]\r\n      );\r\n    };\r\n    fetch_banner();\r\n  }, []);\r\n\r\n  // console.log(movie);\r\n\r\n  return (\r\n    <>\r\n      <header\r\n        className=\"banner_content\"\r\n        style={{\r\n          backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie.backdrop_path}\")`,\r\n          backgroundPosition: \"center center\",\r\n          backgroundSize: \"cover\",\r\n        }}\r\n      >\r\n        <div className=\"banner_contain\">\r\n          <h1 className=\"banner_head\">{movie.name}</h1>\r\n          <div className=\"banner_button\">\r\n            <button className=\"btnbanner\">Play</button>\r\n            <button className=\"btnbanner\">My List</button>\r\n          </div>\r\n          <h2 className=\"banner_desc\">{movie.overview}</h2>\r\n        </div>\r\n        <div className=\"bannerbottm\"></div>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./row.css\";\r\n\r\nconst image_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction RowComp(props) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      const res = await axios.get(props.fetchUrl);\r\n      // .then(res => {\r\n      // console.log(res);\r\n      // })\r\n      // .catch(error =>{\r\n      //     console.log(error)\r\n      // })\r\n      setMovies(res.data.results);\r\n      // console.log(movies);\r\n    };\r\n    fetchMovies();\r\n  });\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{props.title}</h2>\r\n      <div className=\"poster_images\">\r\n        {movies.map((movie) => {\r\n          return (\r\n            <img\r\n              key={movie.id}\r\n              className={`movie_poster ${props.largeposter && \"posterlarge\"}`}\r\n              src={`${image_url}${\r\n                props.largeposter ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.name}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RowComp;\r\n","import \"./App.css\";\nimport Banner from \"./Components/banner\";\nimport RowComp from \"./Components/RowComp\";\nimport request from \"./Components/request\";\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <h1>I m developing Netflix-Clone</h1> */}\n      <Banner />\n      <RowComp\n        title=\"Netflix's Originals\"\n        fetchUrl={request.fecthNetflixOriginals}\n        largeposter={true}\n      />\n      <RowComp title=\"Trending\" fetchUrl={request.fetchTrending} />\n      <RowComp title=\"Top Rated\" fetchUrl={request.fetchTopRated} />\n      <RowComp title=\"Action\" fetchUrl={request.fetchActionMovies} />\n      <RowComp title=\"Romantic\" fetchUrl={request.fetchRomanticMovies} />\n      <RowComp title=\"Documentries\" fetchUrl={request.fetchDocumentries} />\n      <RowComp title=\"Comedy\" fetchUrl={request.fetchComedyMovies} />\n      <RowComp title=\"Horror\" fetchUrl={request.fetchHorrorMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}